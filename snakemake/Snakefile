import os
import pandas as pd

configfile: "config.yaml"

''' Load from config '''
CHROM = config['CHROM']
INDIV = config['INDIV']
READS1 = config['READS1']
GROUP = config['GROUP']
ALN_MAPQ_THRSD = config['ALN_MAPQ_THRSD']
POP_THRSD = config['POP_THRSD']
POP_STOCHASTIC = config['POP_STOCHASTIC']
POP_BLOCK_SIZE = config['POP_BLOCK_SIZE']
POP_USE_LD = config['POP_USE_LD']

DIR = config['DIR']
GENOME = config['GENOME']
DIR_VCF = config['DIR_VCF']
LENGTH_MAP = config['LENGTH_MAP']
CHROM_MAP = config['CHROM_MAP']

FAMILY = config['FAMILY']
SPOP = config['SPOP']
BCFTOOLS = config['BCFTOOLS']
SAMTOOLS = config['SAMTOOLS']
LIFTOVER = config['LIFTOVER']
PYTHON = config['PYTHON']
DIR_SCRIPTS = config['DIR_SCRIPTS']

THREADS = config['THREADS']
RAND_SEED = config['RAND_SEED']
''''''

PREFIX_VCF_F = os.path.join(DIR, '{CHROM}_filtered')
PREFIX_MAJOR_F = os.path.join(DIR, 'major/{CHROM}_filtered_major')
PREFIX_MAJOR = os.path.join(DIR, 'major/chr{CHROM}_maj')
DIR_MAJOR = os.path.join(DIR, 'major')

DIR_FIRST_PASS = os.path.join(DIR, 'experiments/' + INDIV + '/')

DIR_POP_GENOME = os.path.join(DIR, 'pop_genome/')
POP_DIRNAME = 'thrds{0}_S{1}_b{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
POP_GENOME_SUFFIX = \
    'chr{CHROM}-superpop_{GROUP}_thrds' + str(POP_THRSD) + \
    '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
    '_ld' + str(POP_USE_LD)
WG_POP_GENOME_SUFFIX = \
    'wg-superpop_{GROUP}_thrds' + str(POP_THRSD) + \
    '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
    '_ld' + str(POP_USE_LD)
DIR_POP_GENOME_BLOCK = os.path.join(DIR_POP_GENOME, POP_DIRNAME + '/')
DIR_POP_GENOME_BLOCK_IDX = os.path.join(DIR_POP_GENOME_BLOCK, 'indexes/')

DIR_PER = os.path.join(DIR, 'personalized/{INDIV}/')

DIR_FIRST_PASS = os.path.join(DIR, 'experiments/{INDIV}/')
DIR_SECOND_PASS = os.path.join(DIR, 'experiments/{INDIV}/' + POP_DIRNAME)
PREFIX_SECOND_PASS = os.path.join(DIR_SECOND_PASS, 'wg-major-' + ALN_MAPQ_THRSD + '-{GROUP}-' + POP_DIRNAME)

DIR_VG = os.path.join(DIR, 'vg/')
DIR_VG_TMP = os.path.join(DIR, 'vg/tmp/')

DIR_RESULTS_BIAS = os.path.join(DIR, 'results/bias')

IDX_ITEMS = ['1', '2', '3', '4', 'rev.1', 'rev.2']

include: '../snakemake/shared/functions.Snakefile'

# Prepare pop genome and indexes
#      check: 'prepare_pop_genome.done'
include: 'shared/prepare_pop_genome.Snakefile'

# Prepare grc and major genome and indexes
#      check: 'prepare_standard_genome.done'
include: 'shared/prepare_standard_genome.Snakefile'

# Align reads to grch major, reference flow, personalized genomes
#      check: 'alignment_refflow.done'
include: 'shared/alignment.Snakefile'

# Elevate and sort reads
#      check: 'sorting.done'
include: 'shared/elevate_and_sort.Snakefile'

rule all:
    input:
        # Building genomes
        pop_genome = os.path.join(DIR, 'prepare_pop_genome.done'),
        standard_genome = os.path.join(DIR, 'prepare_standard_genome.done'),
        # Align reads with reference flow
        align_refflow = os.path.join(DIR, 'alignment_refflow.done'),
        # Sort SAMs (liftover is included here as well)
        sorting = os.path.join(DIR, 'sorting.done'),

rule filter_vcf:
    input:
        vcf = os.path.join(DIR_VCF, 'ALL.chr{CHROM}.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf.gz'),
        chrom_map = CHROM_MAP
    output:
        vcf = PREFIX_VCF_F + '.vcf'
    shell:
        '{BCFTOOLS} view -c 1 -f PASS -V mnps,other {input.vcf} | {BCFTOOLS} annotate --rename-chrs {input.chrom_map} -o {output.vcf}'

rule prepare_chrom_genome:
    input:
        genome = GENOME
    output:
        os.path.join(DIR, 'chr{CHROM}.fa')
    shell:
        '{SAMTOOLS} faidx {input.genome} chr{wildcards.CHROM} > {output};'

rule aggregate_vcf:
    input:
        vcf = expand(os.path.join(DIR, '{CHROM}_filtered.vcf'), CHROM = CHROM)
    output:
        vcf = os.path.join(DIR, 'wg_filtered.vcf')
    shell:
        '{BCFTOOLS} concat -o {output.vcf} {input.vcf}'

